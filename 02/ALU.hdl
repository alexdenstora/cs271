// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    //zeroing x/y
    And16(a= x, b[0...15]= false, out= zerox);
    And16(a= y, b[0...15]= false, out= zeroy);
    
    //Not16(in= x, out= notx);
    //Not16(in= y, out= noty);

    //Add16(a = x, b = y, out = addxy);
    //And16(a= x, b= y, out= andxy);

    //select between x/y and zeroed x/y
    Mux16(a= x, b= zerox, sel= zx, out= outx);
    Mux16(a= y, b= zeroy, sel= zy, out= outy);

    //negating either x/y or zeroed x/y
    Not16(in= outx, out= notx);
    Not16(in= outy, out= noty);

    //select x/y or negating x/y
    Mux16(a= outx, b= notx, sel= nx, out= outx1);
    Mux16(a= outy, b= noty, sel= ny, out= outy1);

    // x + y
    Add16(a = outx1, b = outy1, out = addxy);

    // x and y
    And16(a= outx1, b= outy1, out= andxy);

    // select add xy or and xy
    Mux16(a= andxy, b= addxy, sel= f, out= outxy);

    // negate output
    Not16(in= outxy, out= notxy);

    // select negating output or not and flag if out is negative
    Mux16(a= outxy, b= notxy, sel= no, out= out, out[15] = ng);

    // flags if out is zero
    Not16(in= outxy, out[0]= out0, out[1]= out1, 
    out[2]= out2, out[3]= out3,
    out[4]= out4, out[5]= out5,
    out[6]= out6, out[7]= out7,
    out[8]= out8, out[9]= out9,
    out[10]= out10, out[11]= out11,
    out[12]= out12, out[13]= out13,
    out[14]= out14, out[15]= out15);

    And(a= out0, b= out1, out= temp1);
    And(a= out2, b= out3, out= temp2);
    And(a= out4, b= out5, out= temp3);
    And(a= out6, b= out7, out= temp4);
    And(a= out8, b= out9, out= temp5);
    And(a= out10, b= out11, out= temp6);
    And(a= out12, b= out13, out= temp7);
    And(a= out14, b= out15, out= temp8);

    And(a= temp1, b= temp2, out= temp9);
    And(a= temp3, b= temp4, out= temp10);
    And(a= temp5, b= temp6, out= temp11);
    And(a= temp9, b= temp10, out= temp12);
    And(a= temp11, b= temp12, out= zr);
    }